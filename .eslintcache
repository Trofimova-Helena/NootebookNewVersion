[{"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\index.js":"1","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\App.js":"2","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\reportWebVitals.js":"3","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\redux\\store.js":"4","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\NoteContainer.js":"5","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\redux\\note-reduсer.js":"6","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\PrintNote.js":"7","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\Search.js":"8"},{"size":578,"mtime":1619091534061,"results":"9","hashOfConfig":"10"},{"size":893,"mtime":1619412138708,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":254,"mtime":1620207818534,"results":"13","hashOfConfig":"10"},{"size":1623,"mtime":1619860986707,"results":"14","hashOfConfig":"10"},{"size":2689,"mtime":1620288223666,"results":"15","hashOfConfig":"10"},{"size":4618,"mtime":1620122729935,"results":"16","hashOfConfig":"10"},{"size":869,"mtime":1620277826815,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"8ciakg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\index.js",[],["36","37"],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\App.js",[],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\reportWebVitals.js",[],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\redux\\store.js",[],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\NoteContainer.js",[],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\redux\\note-reduсer.js",[],"C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\PrintNote.js",["38"],"import React, { useState } from 'react';\r\nimport Search from './Search';\r\nimport styles from './PrintNoteStyle.module.css';\r\nimport imgUrl from './../ProjectImages/page.jpg';\r\n\r\nfunction PrintNote(props) {\r\n    let [edit, setEdit] = useState(false);\r\n    let [changingNote, setChangingNote] = useState(\r\n        {\r\n            id: '',\r\n            note: props.changingNote,\r\n        });\r\n\r\n    let activateEditMode = () => {\r\n        setEdit(true);\r\n        props.UpdateChangingNote(changingNote);\r\n    }\r\n\r\n    let onMouseOverAction = (event) => {\r\n        setChangingNote({ id: event.target.id, note: event.target.innerHTML });\r\n    }\r\n\r\n    let SaveChanging = () => {\r\n        props.Save();\r\n        setEdit(false);\r\n    }\r\n\r\n    let list = props.notes.map((elem) => {\r\n        return elem;\r\n    })\r\n\r\n    let lis = list.map((el, index) => {\r\n        return <li key={el.id} className={styles.li}>\r\n            <span onClick={activateEditMode} onMouseOver={onMouseOverAction} id={el.id}>\r\n                {el.note}\r\n            </span>\r\n            <span><button onClick={props.DelNote} id={el.id} data-index={index} className={styles.btn}>Удалить</button></span>\r\n        </li>\r\n    })\r\n\r\n    let searchLis = list.map((el, ind) => {\r\n        for(let i=0; i<props.searchNotes.length; i++) {\r\n            if (props.searchNotes[i] === ind) {\r\n                return <li key={el.id} className={styles.li}>\r\n                <span onClick={activateEditMode} onMouseOver={onMouseOverAction} id={el.id}>\r\n                    {el.note}\r\n                </span>\r\n                <span><button onClick={props.DelNote} id={el.id} data-index={ind} className={styles.btn}>Удалить</button></span>\r\n            </li> \r\n            }\r\n        }\r\n    })\r\n\r\n    const divStyle = {\r\n        backgroundImage: 'url(' + imgUrl + ')',\r\n        height:1000,\r\n        backgroundSize: 100+ '%' + 100 + '%',\r\n      };\r\n\r\n    return <div style={divStyle}>\r\n        <Search {...props}/>\r\n\r\n        <div className={styles.container}>{props.searchNotes.length <= 0 ? \r\n            <div>\r\n                {!edit ?\r\n                    <div className={styles.titels}>\r\n                        <div>\r\n                            <ul>{lis}</ul>\r\n                        </div>\r\n                        <div className={styles.enteringText}>\r\n                            <textarea onChange={props.ChangeValue} value={props.newNotes} />\r\n                            <div>\r\n                                <button onClick={props.AddNote}>Добавить</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className={styles.titels}>\r\n                        <div>\r\n                            <ul>{lis}</ul>\r\n                        </div>\r\n                        <div className={styles.enteringText}>\r\n                            <textarea value={props.changingNote.note} onChange={props.ChangeTextArrValForEdit} id={props.changingNote.id} />\r\n                            <div>\r\n                                <button onClick={SaveChanging}>Изменить</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            :\r\n\r\n            <div>\r\n                {!edit ?\r\n                    <div className={styles.titels}>\r\n                        <div>\r\n                            <ul>{searchLis}</ul>\r\n                        </div>\r\n                        <div className={styles.enteringText}>\r\n                            <textarea onChange={props.ChangeValue} value={props.newNotes} />\r\n                            <div>\r\n                                <button onClick={props.AddNote}>Добавить</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className={styles.titels}>\r\n                        <div>\r\n                            <ul>{searchLis}</ul>\r\n                        </div>\r\n                        <div className={styles.enteringText}>\r\n                            <textarea value={props.changingNote.note} onChange={props.ChangeTextArrValForEdit} id={props.changingNote.id} />\r\n                            <div>\r\n                                <button onClick={SaveChanging}>Изменить</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default PrintNote;","C:\\Users\\Asus\\Desktop\\ReactStudy\\nootebook_redux\\src\\Notes\\Search.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":41,"column":40,"nodeType":"45","messageId":"46","endLine":41,"endColumn":42},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]